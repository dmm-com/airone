import {
  AttributeData,
  EntityDetail,
  EntryAttributeValue,
  EntryAttributeValueObject,
  EntryRetrieve,
} from "apiclient/autogenerated";
import {
  EditableEntryAttrValue,
  EditableEntryAttrs,
} from "components/entry/entryForm/EditableEntry";
import { Schema } from "components/entry/entryForm/EntryFormSchema";
import { DjangoContext } from "services/DjangoContext";

const djangoContext = DjangoContext.getInstance();

// Convert Entry information from server-side value to presentation format.
// (NOTE) It might be needed to be refactored because if server returns proper format with frontend, this is not necessary.
export function formalizeEntryInfo(
  entry: EntryRetrieve | undefined,
  entity: EntityDetail,
  excludeAttrs: string[]
): Schema {
  return {
    name: entry ? entry.name : "",
    schema: {
      id: entity.id,
      name: entity.name,
    },
    attrs: entity.attrs
      .filter((attr) => !excludeAttrs.includes(attr.name))
      .filter((attr) => attr.id != 0)
      .reduce((acc: Record<string, any>, attr) => {
        function getAttrValue(
          attrType: number,
          value: EntryAttributeValue | undefined
        ) {
          if (!value) {
            return {
              asString: "",
              asBoolean: false,
              asObject: undefined,
              asGroup: undefined,
              asRole: undefined,
              asNamedObject: { name: "", object: null },
              asArrayString: [{ value: "" }],
              asArrayObject: [],
              asArrayGroup: [],
              asArrayRole: [],
              asArrayNamedObject: [{ name: "", object: null }],
            };
          }

          switch (attrType) {
            case djangoContext?.attrTypeValue.array_string:
              return value?.asArrayString?.length ?? 0 > 0
                ? {
                    asArrayString: value.asArrayString?.map((value) => {
                      return { value: value };
                    }),
                  }
                : { asArrayString: [{ value: "" }] };
            case djangoContext?.attrTypeValue.named_object:
              return {
                asNamedObject: {
                  name: Object.keys(value?.asNamedObject ?? {})[0] ?? "",
                  object: Object.values(value.asNamedObject ?? {})[0] ?? null,
                },
              };
            case djangoContext?.attrTypeValue.array_named_object:
              return value?.asArrayNamedObject?.length ?? 0 > 0
                ? {
                    asArrayNamedObject: value?.asArrayNamedObject?.map(
                      (value) => {
                        return {
                          name: Object.keys(value)[0],
                          object: Object.values(value)[0],
                        };
                      }
                    ),
                  }
                : { asArrayNamedObject: [{ name: "", object: null }] };
            default:
              return value;
          }
        }

        const value = entry?.attrs.find((a) => a.schema.id == attr.id)?.value;

        acc[String(attr.id)] = {
          index: attr.index,
          type: attr.type,
          isMandatory: attr.isMandatory,
          schema: {
            id: attr.id,
            name: attr.name,
          },
          value: getAttrValue(attr.type, value),
        };
        return acc;
      }, {}),
  };
}

export function convertAttrsFormatCtoS(
  attrs: Record<string, EditableEntryAttrs>
): AttributeData[] {
  return Object.entries(attrs).map(([{}, attr]) => {
    function getAttrValue(attrType: number, attrValue: EditableEntryAttrValue) {
      switch (attrType) {
        case djangoContext?.attrTypeValue.string:
        case djangoContext?.attrTypeValue.text:
        case djangoContext?.attrTypeValue.date:
          return attrValue.asString;

        case djangoContext?.attrTypeValue.boolean:
          return attrValue.asBoolean;

        case djangoContext?.attrTypeValue.object:
          return attrValue.asObject?.id ?? null;

        case djangoContext?.attrTypeValue.group:
          return attrValue.asGroup?.id ?? null;

        case djangoContext?.attrTypeValue.role:
          return attrValue.asRole?.id ?? null;

        case djangoContext?.attrTypeValue.named_object:
          return {
            id: attrValue.asNamedObject?.object?.id ?? null,
            name: attrValue.asNamedObject?.name ?? "",
          };

        case djangoContext?.attrTypeValue.array_string:
          return attrValue.asArrayString?.map((x) => x.value);

        case djangoContext?.attrTypeValue.array_object:
          return attrValue.asArrayObject?.map((x) => x.id);

        case djangoContext?.attrTypeValue.array_group:
          return attrValue.asArrayGroup?.map((x) => x.id);

        case djangoContext?.attrTypeValue.array_role:
          return attrValue.asArrayRole?.map((x) => x.id);

        case djangoContext?.attrTypeValue.array_named_object:
          return attrValue.asArrayNamedObject?.map((x) => {
            return {
              id: x.object?.id ?? null,
              name: x.name,
            };
          });

        case djangoContext?.attrTypeValue.array_named_object_boolean:
          return (
            attrValue.asArrayNamedObject as {
              name: string;
              object: Pick<
                EntryAttributeValueObject,
                "id" | "name" | "_boolean"
              >;
            }[]
          )?.map((x) => {
            return {
              id: x.object?.id ?? null,
              name: x.name,
              boolean: x.object?._boolean ?? false,
            };
          });

        default:
          throw new Error(`unknown attribute type ${attrType}`);
      }
    }

    return {
      id: attr.schema.id,
      value: getAttrValue(attr.type, attr.value),
    };
  });
}
