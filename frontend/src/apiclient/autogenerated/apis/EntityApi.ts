/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  EntityCreate,
  EntityDetail,
  EntityImportExportRoot,
  EntityUpdate,
  EntryCreate,
  PaginatedEntityHistoryList,
  PaginatedEntityListList,
  PaginatedEntryBaseList,
} from "../models";
import {
  EntityCreateFromJSON,
  EntityCreateToJSON,
  EntityDetailFromJSON,
  EntityDetailToJSON,
  EntityImportExportRootFromJSON,
  EntityImportExportRootToJSON,
  EntityUpdateFromJSON,
  EntityUpdateToJSON,
  EntryCreateFromJSON,
  EntryCreateToJSON,
  PaginatedEntityHistoryListFromJSON,
  PaginatedEntityHistoryListToJSON,
  PaginatedEntityListListFromJSON,
  PaginatedEntityListListToJSON,
  PaginatedEntryBaseListFromJSON,
  PaginatedEntryBaseListToJSON,
} from "../models";

export interface EntityApiV2AttrsListRequest {
  entityIds?: string;
}

export interface EntityApiV2CreateRequest {
  entityCreate: EntityCreate;
  isToplevel?: boolean;
}

export interface EntityApiV2DestroyRequest {
  id: number;
  isToplevel?: boolean;
}

export interface EntityApiV2EntriesCreateRequest {
  entityId: number;
  entryCreate: EntryCreate;
}

export interface EntityApiV2EntriesListRequest {
  entityId: number;
  isActive?: boolean;
  ordering?: string;
  page?: number;
  search?: string;
}

export interface EntityApiV2HistoriesListRequest {
  entityId: number;
  limit?: number;
  offset?: number;
}

export interface EntityApiV2ListRequest {
  isToplevel?: boolean;
  limit?: number;
  offset?: number;
  ordering?: string;
  search?: string;
}

export interface EntityApiV2RetrieveRequest {
  id: number;
  isToplevel?: boolean;
}

export interface EntityApiV2UpdateRequest {
  id: number;
  isToplevel?: boolean;
  entityUpdate?: EntityUpdate;
}

/**
 *
 */
export class EntityApi extends runtime.BaseAPI {
  /**
   *
   */
  async entityApiV2AttrsListRaw(
    requestParameters: EntityApiV2AttrsListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<string>>> {
    const queryParameters: any = {};

    if (requestParameters.entityIds !== undefined) {
      queryParameters["entity_ids"] = requestParameters.entityIds;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/attrs`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse<any>(response);
  }

  /**
   *
   */
  async entityApiV2AttrsList(
    requestParameters: EntityApiV2AttrsListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<string>> {
    const response = await this.entityApiV2AttrsListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async entityApiV2CreateRaw(
    requestParameters: EntityApiV2CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityCreate>> {
    if (
      requestParameters.entityCreate === null ||
      requestParameters.entityCreate === undefined
    ) {
      throw new runtime.RequiredError(
        "entityCreate",
        "Required parameter requestParameters.entityCreate was null or undefined when calling entityApiV2Create."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.isToplevel !== undefined) {
      queryParameters["is_toplevel"] = requestParameters.isToplevel;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: EntityCreateToJSON(requestParameters.entityCreate),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityCreateFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async entityApiV2Create(
    requestParameters: EntityApiV2CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityCreate> {
    const response = await this.entityApiV2CreateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async entityApiV2DestroyRaw(
    requestParameters: EntityApiV2DestroyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling entityApiV2Destroy."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.isToplevel !== undefined) {
      queryParameters["is_toplevel"] = requestParameters.isToplevel;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   *
   */
  async entityApiV2Destroy(
    requestParameters: EntityApiV2DestroyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.entityApiV2DestroyRaw(requestParameters, initOverrides);
  }

  /**
   *
   */
  async entityApiV2EntriesCreateRaw(
    requestParameters: EntityApiV2EntriesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntryCreate>> {
    if (
      requestParameters.entityId === null ||
      requestParameters.entityId === undefined
    ) {
      throw new runtime.RequiredError(
        "entityId",
        "Required parameter requestParameters.entityId was null or undefined when calling entityApiV2EntriesCreate."
      );
    }

    if (
      requestParameters.entryCreate === null ||
      requestParameters.entryCreate === undefined
    ) {
      throw new runtime.RequiredError(
        "entryCreate",
        "Required parameter requestParameters.entryCreate was null or undefined when calling entityApiV2EntriesCreate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/{entity_id}/entries/`.replace(
          `{${"entity_id"}}`,
          encodeURIComponent(String(requestParameters.entityId))
        ),
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: EntryCreateToJSON(requestParameters.entryCreate),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntryCreateFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async entityApiV2EntriesCreate(
    requestParameters: EntityApiV2EntriesCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntryCreate> {
    const response = await this.entityApiV2EntriesCreateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async entityApiV2EntriesListRaw(
    requestParameters: EntityApiV2EntriesListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedEntryBaseList>> {
    if (
      requestParameters.entityId === null ||
      requestParameters.entityId === undefined
    ) {
      throw new runtime.RequiredError(
        "entityId",
        "Required parameter requestParameters.entityId was null or undefined when calling entityApiV2EntriesList."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.isActive !== undefined) {
      queryParameters["is_active"] = requestParameters.isActive;
    }

    if (requestParameters.ordering !== undefined) {
      queryParameters["ordering"] = requestParameters.ordering;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.search !== undefined) {
      queryParameters["search"] = requestParameters.search;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/{entity_id}/entries/`.replace(
          `{${"entity_id"}}`,
          encodeURIComponent(String(requestParameters.entityId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginatedEntryBaseListFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async entityApiV2EntriesList(
    requestParameters: EntityApiV2EntriesListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedEntryBaseList> {
    const response = await this.entityApiV2EntriesListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async entityApiV2ExportRetrieveRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityImportExportRoot>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/export`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityImportExportRootFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async entityApiV2ExportRetrieve(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityImportExportRoot> {
    const response = await this.entityApiV2ExportRetrieveRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async entityApiV2HistoriesListRaw(
    requestParameters: EntityApiV2HistoriesListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedEntityHistoryList>> {
    if (
      requestParameters.entityId === null ||
      requestParameters.entityId === undefined
    ) {
      throw new runtime.RequiredError(
        "entityId",
        "Required parameter requestParameters.entityId was null or undefined when calling entityApiV2HistoriesList."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/{entity_id}/histories/`.replace(
          `{${"entity_id"}}`,
          encodeURIComponent(String(requestParameters.entityId))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginatedEntityHistoryListFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async entityApiV2HistoriesList(
    requestParameters: EntityApiV2HistoriesListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedEntityHistoryList> {
    const response = await this.entityApiV2HistoriesListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async entityApiV2ImportCreateRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/import`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   *
   */
  async entityApiV2ImportCreate(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.entityApiV2ImportCreateRaw(initOverrides);
  }

  /**
   *
   */
  async entityApiV2ListRaw(
    requestParameters: EntityApiV2ListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedEntityListList>> {
    const queryParameters: any = {};

    if (requestParameters.isToplevel !== undefined) {
      queryParameters["is_toplevel"] = requestParameters.isToplevel;
    }

    if (requestParameters.limit !== undefined) {
      queryParameters["limit"] = requestParameters.limit;
    }

    if (requestParameters.offset !== undefined) {
      queryParameters["offset"] = requestParameters.offset;
    }

    if (requestParameters.ordering !== undefined) {
      queryParameters["ordering"] = requestParameters.ordering;
    }

    if (requestParameters.search !== undefined) {
      queryParameters["search"] = requestParameters.search;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginatedEntityListListFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async entityApiV2List(
    requestParameters: EntityApiV2ListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedEntityListList> {
    const response = await this.entityApiV2ListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async entityApiV2RetrieveRaw(
    requestParameters: EntityApiV2RetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityDetail>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling entityApiV2Retrieve."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.isToplevel !== undefined) {
      queryParameters["is_toplevel"] = requestParameters.isToplevel;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityDetailFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async entityApiV2Retrieve(
    requestParameters: EntityApiV2RetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityDetail> {
    const response = await this.entityApiV2RetrieveRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async entityApiV2UpdateRaw(
    requestParameters: EntityApiV2UpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<EntityUpdate>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling entityApiV2Update."
      );
    }

    const queryParameters: any = {};

    if (requestParameters.isToplevel !== undefined) {
      queryParameters["is_toplevel"] = requestParameters.isToplevel;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/entity/api/v2/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: EntityUpdateToJSON(requestParameters.entityUpdate),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      EntityUpdateFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async entityApiV2Update(
    requestParameters: EntityApiV2UpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<EntityUpdate> {
    const response = await this.entityApiV2UpdateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
