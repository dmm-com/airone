/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  PaginatedUserListList,
  PasswordReset,
  PasswordResetConfirm,
  PatchedUserPassword,
  PatchedUserPasswordBySuperuser,
  UserCreate,
  UserExport,
  UserPassword,
  UserPasswordBySuperuser,
  UserRetrieve,
  UserToken,
  UserUpdate,
} from "../models";
import {
  PaginatedUserListListFromJSON,
  PaginatedUserListListToJSON,
  PasswordResetFromJSON,
  PasswordResetToJSON,
  PasswordResetConfirmFromJSON,
  PasswordResetConfirmToJSON,
  PatchedUserPasswordFromJSON,
  PatchedUserPasswordToJSON,
  PatchedUserPasswordBySuperuserFromJSON,
  PatchedUserPasswordBySuperuserToJSON,
  UserCreateFromJSON,
  UserCreateToJSON,
  UserExportFromJSON,
  UserExportToJSON,
  UserPasswordFromJSON,
  UserPasswordToJSON,
  UserPasswordBySuperuserFromJSON,
  UserPasswordBySuperuserToJSON,
  UserRetrieveFromJSON,
  UserRetrieveToJSON,
  UserTokenFromJSON,
  UserTokenToJSON,
  UserUpdateFromJSON,
  UserUpdateToJSON,
} from "../models";

export interface UserApiV2CreateRequest {
  userCreate: UserCreate;
}

export interface UserApiV2DestroyRequest {
  id: number;
}

export interface UserApiV2EditPasswdPartialUpdateRequest {
  id: number;
  patchedUserPassword?: PatchedUserPassword;
}

export interface UserApiV2EditPasswdUpdateRequest {
  id: number;
  userPassword: UserPassword;
}

export interface UserApiV2ListRequest {
  ordering?: string;
  page?: number;
  search?: string;
}

export interface UserApiV2PasswordResetConfirmCreateRequest {
  passwordResetConfirm: PasswordResetConfirm;
}

export interface UserApiV2PasswordResetCreateRequest {
  passwordReset: PasswordReset;
}

export interface UserApiV2RetrieveRequest {
  id: number;
}

export interface UserApiV2SuEditPasswdPartialUpdateRequest {
  id: number;
  patchedUserPasswordBySuperuser?: PatchedUserPasswordBySuperuser;
}

export interface UserApiV2SuEditPasswdUpdateRequest {
  id: number;
  userPasswordBySuperuser: UserPasswordBySuperuser;
}

export interface UserApiV2TokenCreateRequest {
  userToken?: UserToken;
}

export interface UserApiV2UpdateRequest {
  id: number;
  userUpdate: UserUpdate;
}

/**
 *
 */
export class UserApi extends runtime.BaseAPI {
  /**
   *
   */
  async userApiV2CreateRaw(
    requestParameters: UserApiV2CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserCreate>> {
    if (
      requestParameters.userCreate === null ||
      requestParameters.userCreate === undefined
    ) {
      throw new runtime.RequiredError(
        "userCreate",
        "Required parameter requestParameters.userCreate was null or undefined when calling userApiV2Create."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserCreateToJSON(requestParameters.userCreate),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserCreateFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2Create(
    requestParameters: UserApiV2CreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserCreate> {
    const response = await this.userApiV2CreateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async userApiV2DestroyRaw(
    requestParameters: UserApiV2DestroyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userApiV2Destroy."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   *
   */
  async userApiV2Destroy(
    requestParameters: UserApiV2DestroyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.userApiV2DestroyRaw(requestParameters, initOverrides);
  }

  /**
   *
   */
  async userApiV2EditPasswdPartialUpdateRaw(
    requestParameters: UserApiV2EditPasswdPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPassword>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userApiV2EditPasswdPartialUpdate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/{id}/edit_passwd`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: PatchedUserPasswordToJSON(requestParameters.patchedUserPassword),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserPasswordFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2EditPasswdPartialUpdate(
    requestParameters: UserApiV2EditPasswdPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPassword> {
    const response = await this.userApiV2EditPasswdPartialUpdateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async userApiV2EditPasswdUpdateRaw(
    requestParameters: UserApiV2EditPasswdUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPassword>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userApiV2EditPasswdUpdate."
      );
    }

    if (
      requestParameters.userPassword === null ||
      requestParameters.userPassword === undefined
    ) {
      throw new runtime.RequiredError(
        "userPassword",
        "Required parameter requestParameters.userPassword was null or undefined when calling userApiV2EditPasswdUpdate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/{id}/edit_passwd`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UserPasswordToJSON(requestParameters.userPassword),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserPasswordFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2EditPasswdUpdate(
    requestParameters: UserApiV2EditPasswdUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPassword> {
    const response = await this.userApiV2EditPasswdUpdateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async userApiV2ExportListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<UserExport>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/export/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(UserExportFromJSON)
    );
  }

  /**
   *
   */
  async userApiV2ExportList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<UserExport>> {
    const response = await this.userApiV2ExportListRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async userApiV2ImportCreateRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/import/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   *
   */
  async userApiV2ImportCreate(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.userApiV2ImportCreateRaw(initOverrides);
  }

  /**
   *
   */
  async userApiV2ListRaw(
    requestParameters: UserApiV2ListRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginatedUserListList>> {
    const queryParameters: any = {};

    if (requestParameters.ordering !== undefined) {
      queryParameters["ordering"] = requestParameters.ordering;
    }

    if (requestParameters.page !== undefined) {
      queryParameters["page"] = requestParameters.page;
    }

    if (requestParameters.search !== undefined) {
      queryParameters["search"] = requestParameters.search;
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginatedUserListListFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2List(
    requestParameters: UserApiV2ListRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginatedUserListList> {
    const response = await this.userApiV2ListRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async userApiV2PasswordResetConfirmCreateRaw(
    requestParameters: UserApiV2PasswordResetConfirmCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PasswordResetConfirm>> {
    if (
      requestParameters.passwordResetConfirm === null ||
      requestParameters.passwordResetConfirm === undefined
    ) {
      throw new runtime.RequiredError(
        "passwordResetConfirm",
        "Required parameter requestParameters.passwordResetConfirm was null or undefined when calling userApiV2PasswordResetConfirmCreate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/password_reset/confirm`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PasswordResetConfirmToJSON(
          requestParameters.passwordResetConfirm
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PasswordResetConfirmFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2PasswordResetConfirmCreate(
    requestParameters: UserApiV2PasswordResetConfirmCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PasswordResetConfirm> {
    const response = await this.userApiV2PasswordResetConfirmCreateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async userApiV2PasswordResetCreateRaw(
    requestParameters: UserApiV2PasswordResetCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PasswordReset>> {
    if (
      requestParameters.passwordReset === null ||
      requestParameters.passwordReset === undefined
    ) {
      throw new runtime.RequiredError(
        "passwordReset",
        "Required parameter requestParameters.passwordReset was null or undefined when calling userApiV2PasswordResetCreate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/password_reset`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: PasswordResetToJSON(requestParameters.passwordReset),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PasswordResetFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2PasswordResetCreate(
    requestParameters: UserApiV2PasswordResetCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PasswordReset> {
    const response = await this.userApiV2PasswordResetCreateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async userApiV2RetrieveRaw(
    requestParameters: UserApiV2RetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserRetrieve>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userApiV2Retrieve."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserRetrieveFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2Retrieve(
    requestParameters: UserApiV2RetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserRetrieve> {
    const response = await this.userApiV2RetrieveRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async userApiV2SuEditPasswdPartialUpdateRaw(
    requestParameters: UserApiV2SuEditPasswdPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPasswordBySuperuser>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userApiV2SuEditPasswdPartialUpdate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/{id}/su_edit_passwd`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PATCH",
        headers: headerParameters,
        query: queryParameters,
        body: PatchedUserPasswordBySuperuserToJSON(
          requestParameters.patchedUserPasswordBySuperuser
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserPasswordBySuperuserFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2SuEditPasswdPartialUpdate(
    requestParameters: UserApiV2SuEditPasswdPartialUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPasswordBySuperuser> {
    const response = await this.userApiV2SuEditPasswdPartialUpdateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async userApiV2SuEditPasswdUpdateRaw(
    requestParameters: UserApiV2SuEditPasswdUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserPasswordBySuperuser>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userApiV2SuEditPasswdUpdate."
      );
    }

    if (
      requestParameters.userPasswordBySuperuser === null ||
      requestParameters.userPasswordBySuperuser === undefined
    ) {
      throw new runtime.RequiredError(
        "userPasswordBySuperuser",
        "Required parameter requestParameters.userPasswordBySuperuser was null or undefined when calling userApiV2SuEditPasswdUpdate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/{id}/su_edit_passwd`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UserPasswordBySuperuserToJSON(
          requestParameters.userPasswordBySuperuser
        ),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserPasswordBySuperuserFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2SuEditPasswdUpdate(
    requestParameters: UserApiV2SuEditPasswdUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserPasswordBySuperuser> {
    const response = await this.userApiV2SuEditPasswdUpdateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async userApiV2TokenCreateRaw(
    requestParameters: UserApiV2TokenCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserToken>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/token/`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: UserTokenToJSON(requestParameters.userToken),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserTokenFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2TokenCreate(
    requestParameters: UserApiV2TokenCreateRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserToken> {
    const response = await this.userApiV2TokenCreateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async userApiV2TokenRetrieveRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserToken>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/token/`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserTokenFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2TokenRetrieve(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserToken> {
    const response = await this.userApiV2TokenRetrieveRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async userApiV2UpdateRaw(
    requestParameters: UserApiV2UpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<UserUpdate>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling userApiV2Update."
      );
    }

    if (
      requestParameters.userUpdate === null ||
      requestParameters.userUpdate === undefined
    ) {
      throw new runtime.RequiredError(
        "userUpdate",
        "Required parameter requestParameters.userUpdate was null or undefined when calling userApiV2Update."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/user/api/v2/{id}/`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: UserUpdateToJSON(requestParameters.userUpdate),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      UserUpdateFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async userApiV2Update(
    requestParameters: UserApiV2UpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<UserUpdate> {
    const response = await this.userApiV2UpdateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
