/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";
import type {
  Group,
  GroupCreateUpdate,
  GroupExport,
  GroupTree,
} from "../models";
import {
  GroupFromJSON,
  GroupToJSON,
  GroupCreateUpdateFromJSON,
  GroupCreateUpdateToJSON,
  GroupExportFromJSON,
  GroupExportToJSON,
  GroupTreeFromJSON,
  GroupTreeToJSON,
} from "../models";

export interface GroupApiV2GroupsCreateRequest {
  groupCreateUpdate: GroupCreateUpdate;
}

export interface GroupApiV2GroupsDestroyRequest {
  id: number;
}

export interface GroupApiV2GroupsRetrieveRequest {
  id: number;
}

export interface GroupApiV2GroupsUpdateRequest {
  id: number;
  groupCreateUpdate: GroupCreateUpdate;
}

/**
 *
 */
export class GroupApi extends runtime.BaseAPI {
  /**
   *
   */
  async groupApiV2GroupsCreateRaw(
    requestParameters: GroupApiV2GroupsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GroupCreateUpdate>> {
    if (
      requestParameters.groupCreateUpdate === null ||
      requestParameters.groupCreateUpdate === undefined
    ) {
      throw new runtime.RequiredError(
        "groupCreateUpdate",
        "Required parameter requestParameters.groupCreateUpdate was null or undefined when calling groupApiV2GroupsCreate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/group/api/v2/groups`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: GroupCreateUpdateToJSON(requestParameters.groupCreateUpdate),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GroupCreateUpdateFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async groupApiV2GroupsCreate(
    requestParameters: GroupApiV2GroupsCreateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GroupCreateUpdate> {
    const response = await this.groupApiV2GroupsCreateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async groupApiV2GroupsDestroyRaw(
    requestParameters: GroupApiV2GroupsDestroyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling groupApiV2GroupsDestroy."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/group/api/v2/groups/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "DELETE",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   *
   */
  async groupApiV2GroupsDestroy(
    requestParameters: GroupApiV2GroupsDestroyRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.groupApiV2GroupsDestroyRaw(requestParameters, initOverrides);
  }

  /**
   *
   */
  async groupApiV2GroupsExportListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<GroupExport>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/group/api/v2/groups/export`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GroupExportFromJSON)
    );
  }

  /**
   *
   */
  async groupApiV2GroupsExportList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<GroupExport>> {
    const response = await this.groupApiV2GroupsExportListRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async groupApiV2GroupsImportCreateRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/group/api/v2/groups/import`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   *
   */
  async groupApiV2GroupsImportCreate(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.groupApiV2GroupsImportCreateRaw(initOverrides);
  }

  /**
   *
   */
  async groupApiV2GroupsListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<Group>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/group/api/v2/groups`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GroupFromJSON)
    );
  }

  /**
   *
   */
  async groupApiV2GroupsList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<Group>> {
    const response = await this.groupApiV2GroupsListRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async groupApiV2GroupsRetrieveRaw(
    requestParameters: GroupApiV2GroupsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Group>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling groupApiV2GroupsRetrieve."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/group/api/v2/groups/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GroupFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async groupApiV2GroupsRetrieve(
    requestParameters: GroupApiV2GroupsRetrieveRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Group> {
    const response = await this.groupApiV2GroupsRetrieveRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   *
   */
  async groupApiV2GroupsTreeListRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Array<GroupTree>>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/group/api/v2/groups/tree`,
        method: "GET",
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      jsonValue.map(GroupTreeFromJSON)
    );
  }

  /**
   *
   */
  async groupApiV2GroupsTreeList(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Array<GroupTree>> {
    const response = await this.groupApiV2GroupsTreeListRaw(initOverrides);
    return await response.value();
  }

  /**
   *
   */
  async groupApiV2GroupsUpdateRaw(
    requestParameters: GroupApiV2GroupsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<GroupCreateUpdate>> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
      throw new runtime.RequiredError(
        "id",
        "Required parameter requestParameters.id was null or undefined when calling groupApiV2GroupsUpdate."
      );
    }

    if (
      requestParameters.groupCreateUpdate === null ||
      requestParameters.groupCreateUpdate === undefined
    ) {
      throw new runtime.RequiredError(
        "groupCreateUpdate",
        "Required parameter requestParameters.groupCreateUpdate was null or undefined when calling groupApiV2GroupsUpdate."
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    if (
      this.configuration &&
      (this.configuration.username !== undefined ||
        this.configuration.password !== undefined)
    ) {
      headerParameters["Authorization"] =
        "Basic " +
        btoa(this.configuration.username + ":" + this.configuration.password);
    }
    if (this.configuration && this.configuration.apiKey) {
      headerParameters["Authorization"] =
        this.configuration.apiKey("Authorization"); // tokenAuth authentication
    }

    const response = await this.request(
      {
        path: `/group/api/v2/groups/{id}`.replace(
          `{${"id"}}`,
          encodeURIComponent(String(requestParameters.id))
        ),
        method: "PUT",
        headers: headerParameters,
        query: queryParameters,
        body: GroupCreateUpdateToJSON(requestParameters.groupCreateUpdate),
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      GroupCreateUpdateFromJSON(jsonValue)
    );
  }

  /**
   *
   */
  async groupApiV2GroupsUpdate(
    requestParameters: GroupApiV2GroupsUpdateRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<GroupCreateUpdate> {
    const response = await this.groupApiV2GroupsUpdateRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}
