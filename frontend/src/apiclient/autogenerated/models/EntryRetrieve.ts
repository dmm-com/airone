/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from "../runtime";
import type { Entity } from "./Entity";
import { EntityFromJSON, EntityFromJSONTyped, EntityToJSON } from "./Entity";
import type { EntryAttributeType } from "./EntryAttributeType";
import {
  EntryAttributeTypeFromJSON,
  EntryAttributeTypeFromJSONTyped,
  EntryAttributeTypeToJSON,
} from "./EntryAttributeType";
import type { UserBase } from "./UserBase";
import {
  UserBaseFromJSON,
  UserBaseFromJSONTyped,
  UserBaseToJSON,
} from "./UserBase";

/**
 *
 * @export
 * @interface EntryRetrieve
 */
export interface EntryRetrieve {
  /**
   *
   * @type {number}
   * @memberof EntryRetrieve
   */
  readonly id: number;
  /**
   *
   * @type {string}
   * @memberof EntryRetrieve
   */
  name: string;
  /**
   *
   * @type {Entity}
   * @memberof EntryRetrieve
   */
  schema: Entity;
  /**
   *
   * @type {boolean}
   * @memberof EntryRetrieve
   */
  readonly isActive: boolean;
  /**
   *
   * @type {UserBase}
   * @memberof EntryRetrieve
   */
  readonly deletedUser: UserBase | null;
  /**
   *
   * @type {Date}
   * @memberof EntryRetrieve
   */
  deletedTime?: Date | null;
  /**
   *
   * @type {Array<EntryAttributeType>}
   * @memberof EntryRetrieve
   */
  readonly attrs: Array<EntryAttributeType>;
  /**
   *
   * @type {boolean}
   * @memberof EntryRetrieve
   */
  isPublic?: boolean;
}

/**
 * Check if a given object implements the EntryRetrieve interface.
 */
export function instanceOfEntryRetrieve(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && "id" in value;
  isInstance = isInstance && "name" in value;
  isInstance = isInstance && "schema" in value;
  isInstance = isInstance && "isActive" in value;
  isInstance = isInstance && "deletedUser" in value;
  isInstance = isInstance && "attrs" in value;

  return isInstance;
}

export function EntryRetrieveFromJSON(json: any): EntryRetrieve {
  return EntryRetrieveFromJSONTyped(json, false);
}

export function EntryRetrieveFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): EntryRetrieve {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    id: json["id"],
    name: json["name"],
    schema: EntityFromJSON(json["schema"]),
    isActive: json["is_active"],
    deletedUser: UserBaseFromJSON(json["deleted_user"]),
    deletedTime: !exists(json, "deleted_time")
      ? undefined
      : json["deleted_time"] === null
      ? null
      : new Date(json["deleted_time"]),
    attrs: (json["attrs"] as Array<any>).map(EntryAttributeTypeFromJSON),
    isPublic: !exists(json, "is_public") ? undefined : json["is_public"],
  };
}

export function EntryRetrieveToJSON(value?: EntryRetrieve | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    name: value.name,
    schema: EntityToJSON(value.schema),
    deleted_time:
      value.deletedTime === undefined
        ? undefined
        : value.deletedTime === null
        ? null
        : value.deletedTime.toISOString(),
    is_public: value.isPublic,
  };
}
